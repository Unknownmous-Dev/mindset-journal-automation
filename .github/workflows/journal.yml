name: Daily Mindset Journal
on:
  schedule:
    - cron: '0 8 * * *'  # 8AM UTC daily
  workflow_dispatch:     # Manual trigger
jobs:
  publish-journal:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install requests fpdf
    - name: Generate and publish journal
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        GUMROAD_TOKEN: ${{ secrets.GUMROAD_TOKEN }}
      run: |
        cat << 'EOF' > journal_automation.py
        import os
        import requests
        import datetime
        from fpdf import FPDF
        
        # Secure API access
        HF_TOKEN = os.environ['HF_TOKEN']
        GUMROAD_TOKEN = os.environ['GUMROAD_TOKEN']
        DATE = datetime.datetime.now().strftime("%Y-%m-%d")
        
        # Optimized prompt
        PROMPT = f"""
        Create a premium mindset journal for {DATE} with:
        1. Powerful 5-word title
        2. 3 motivational paragraphs
        3. 5 affirmations
        4. 1 inspirational quote with author
        5. 3 reflection prompts
        6. 5-item gratitude list
        
        Format in Markdown:
        # [TITLE]
        [BODY]
        ## Affirmations
        - ...
        ## Quote
        > ...
        ## Reflection
        1. ...
        ## Gratitude
        - ...
        """
        
        # Call Hugging Face API
        print("Calling Hugging Face API...")
        response = requests.post(
            "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1",
            headers={"Authorization": f"Bearer {HF_TOKEN}"},
            json={
                "inputs": PROMPT,
                "parameters": {
                    "max_new_tokens": 1200,
                    "temperature": 0.7,
                    "return_full_text": False
                }
            }
        )
        
        # Handle response
        if response.status_code == 200:
            journal_content = response.json()[0]['generated_text']
            print("‚úÖ Journal content generated!")
        else:
            print(f"‚ùå Hugging Face API error: {response.status_code}")
            print(response.text)
            raise Exception("Failed to generate journal content")
        
        # Create PDF
        print("Creating PDF...")
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt=f"Daily Mindset Journal - {DATE}", ln=True, align='C')
        pdf.ln(10)
        
        # Simple markdown parsing
        for line in journal_content.split('\n'):
            if line.startswith("# "):
                pdf.set_font("Arial", 'B', 20)
                pdf.cell(0, 10, line[2:], ln=True)
            elif line.startswith("## "):
                pdf.set_font("Arial", 'B', 16)
                pdf.cell(0, 10, line[3:], ln=True)
            elif line.startswith(">"):
                pdf.set_font("Arial", 'I', 12)
                pdf.multi_cell(0, 8, line[1:].strip())
            else:
                pdf.set_font("Arial", size=12)
                pdf.multi_cell(0, 8, line)
            pdf.ln(3)
        
        # Add footer
        pdf.set_y(-15)
        pdf.set_font("Arial", 'I', 8)
        pdf.cell(0, 10, "Created by Unknownmous", align='C')
        
        PDF_FILE = f"Daily_Mindset_Journal_{DATE}.pdf"
        pdf.output(PDF_FILE)
        print(f"üìÑ PDF saved as {PDF_FILE}")
        
        # Upload to Gumroad
        print("Uploading to Gumroad...")
        with open(PDF_FILE, "rb") as f:
            gumroad_response = requests.post(
                "https://api.gumroad.com/v2/products",
                files={"file": (PDF_FILE, f)},
                data={
                    "name": f"Daily Mindset Journal - {DATE}",
                    "description": "Premium mindset journal to elevate your thinking. Created by Unknownmous.",
                    "published": "true"
                },
                auth=(GUMROAD_TOKEN, '')
            )
        
        # Robust response handling
        try:
            if gumroad_response.status_code == 200:
                product_url = gumroad_response.json().get('product', {}).get('url', 'Unknown URL')
                print(f"‚úÖ Journal published at: {product_url}")
            else:
                print(f"‚ö†Ô∏è Gumroad upload failed: {gumroad_response.status_code}")
                print(f"Response: {gumroad_response.text[:200]}")
        except Exception as e:
            print(f"‚ùå Error processing Gumroad response: {str(e)}")
            print(f"Full response: {gumroad_response.text[:500]}")
        EOF
        python journal_automation.py
